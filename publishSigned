#!/usr/bin/env -S scala-cli shebang

//> using dep "com.lihaoyi::os-lib:0.9.1"

// expects SONATYPE_USERNAME and SONATYPE_PASSWORD to be set prior to running!

val console = System.console()
if (console == null) {
  System.err.println("Could not initialize system console. Exiting.")
  System.exit(1)
}

val sonatypeUsername = System.getenv("SONATYPE_USERNAME")
val sonatypePassword = System.getenv("SONATYPE_PASSWORD")
if (sonatypeUsername == null) {
  System.err.println(s"Environment variable 'SONATYPE_USERNAME' not set. Exiting.")
  System.exit(1)
}
if (sonatypePassword == null) {
  System.err.println(s"Environment variable 'SONATYPE_PASSWORD' not set. Exiting.")
  System.exit(1)
}

val gpgPassphrase = console.readPassword("Please enter GPG passphrase for signing: ")

// see https://github.com/keybase/keybase-issues/issues/2798

// val tty = os.proc("tty").call().out.trim()

// val additionalEnv = Map("GPG_TTY" -> tty )

val result = os.proc(
  "./mill", "mill.scalalib.PublishModule/publishAll", "__.publishArtifacts",
  "--sonatypeCreds", s"${sonatypeUsername}:${sonatypePassword}",
  "--gpgArgs", s"--passphrase=${new String(gpgPassphrase)},--batch,--yes,-a,-b,--pinentry-mode=loopback",
  "--release", "false"
).call( /* env = additionalEnv, */ mergeErrIntoOut = true )

System.err.println( result.out.trim() )

val ec = result.exitCode

if ec != 0 then
  System.err.println(s"publishSigned failed with exit code: ${ec}")
  System.exit(ec)




